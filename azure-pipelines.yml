# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
- task: TerraformInstaller@1
  displayName: 'Terraform Version'
  inputs:
    terraformVersion: 'latest'

- task: TerraformTaskV4@4
  displayName: 'Terraform init'
  inputs:
    provider: 'azurerm'
    command: 'init'
    workingDirectory: '$(System.DefaultWorkingDirectory)/Linux_VM'
    backendServiceArm: 'AzureDevops'
    backendAzureRmResourceGroupName: 'rg'
    backendAzureRmStorageAccountName: 'rglogicapps8cb1'
    backendAzureRmContainerName: 'statefile'
    backendAzureRmKey: 'vmstatefile.tfstate'

- task: TerraformTaskV4@4
  displayName: 'Terraform Validate'
  inputs:
    provider: 'azurerm'
    command: 'validate'
    workingDirectory: '$(System.DefaultWorkingDirectory)/Linux_VM'

- task: TerraformTaskV4@4
  displayName: 'Terraform Plan'
  inputs:
    provider: 'azurerm'
    command: 'plan'
    workingDirectory: '$(System.DefaultWorkingDirectory)/Linux_VM'
    environmentServiceNameAzureRM: 'AzureDevops'

- task: TerraformTaskV4@4
  displayName: 'Terraform Apply'
  inputs:
    provider: 'azurerm'
    command: 'apply'
    workingDirectory: '$(System.DefaultWorkingDirectory)/Linux_VM'
    environmentServiceNameAzureRM: 'AzureDevops'